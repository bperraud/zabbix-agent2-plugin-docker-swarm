name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: "1.21"

jobs:
  test:
    name: Test and Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('src/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      working-directory: ./src
      run: go mod download

    - name: Run go fmt
      working-directory: ./src
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted. Please run 'go fmt ./...'"
          gofmt -s -l .
          exit 1
        fi

    - name: Run go vet
      working-directory: ./src
      run: GOOS=linux go vet ./...

    - name: Run go mod tidy check
      working-directory: ./src
      run: |
        go mod tidy
        if [ -n "$(git diff go.mod go.sum)" ]; then
          echo "go.mod or go.sum is not up to date. Please run 'go mod tidy'"
          git diff go.mod go.sum
          exit 1
        fi

    - name: Build for x86_64
      working-directory: ./src
      run: GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o docker-swarm-linux-amd64 .

    - name: Build for ARM64
      working-directory: ./src
      run: GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o docker-swarm-linux-arm64 .

    - name: Test binary execution (basic)
      working-directory: ./src
      run: |
        chmod +x docker-swarm-linux-amd64
        file docker-swarm-linux-amd64
        # Test that the binary can show help/version (may exit with non-zero, that's ok)
        ./docker-swarm-linux-amd64 --help || echo "Help command executed (expected to exit non-zero)"
        ./docker-swarm-linux-amd64 --version || echo "Version command executed (expected to exit non-zero)"

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: ./src
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec-results.sarif ./src/...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec-results.sarif 